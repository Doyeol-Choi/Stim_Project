<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.stim.model.mapper.StimGameListMapper">
	
    <resultMap type="com.stim.vo.GameVO" id="gameMap">
    	<result column="game_code" property="game_code"/>
    	<result column="game_name" property="game_name"/>
    	<result column="game_price" property="game_price"/>
    	<result column="game_releaseDate" property="game_releaseDate"/>
    	<result column="game_developer" property="game_developer"/>
    	<result column="game_distribution" property="game_distribution"/>
    	<result column="game_context" property="game_context"/>
    	<result column="game_salesRate" property="game_salesRate"/>
    	<result column="game_picture" property="game_picture"/>
    	<result column="game_discount" property="game_discount"/>
    	<result column="GAME_FINALPRICE" property="game_finalPrice"/>
    </resultMap>
	
	
	<sql id="selectAll">
      	SELECT gm.game_code, gm.game_name, gm.game_price, gm.game_releaseDate, gm.game_developer, gm.game_distribution, 
		gm.game_context, gm.game_salesRate, gm.game_picture, gm.game_discount,
		gn.genre_1, gn.genre_2, gn.genre_3,
		    CASE
		        WHEN game_discount IS NULL THEN game_price        
		        ELSE game_price*(1-(game_discount/100))
		    END as "GAME_FINALPRICE"
		FROM game_tbl gm INNER JOIN genre_tbl gn
		ON gm.game_code = gn.game_code
	</sql>
	
	<!-- 게임 상점 목록 출력 (게임 코드 내림차순) -->
    <select id="SelectAllGameList" resultMap="gameMap">
       <include refid="selectAll" />
		ORDER BY gm.game_code DESC
    </select>
    
    
    <!-- 최신 게임 목록 출력 (게임 날짜 최신/내림차순) -->
    <select id="SelectNewestGameList" resultMap="gameMap">
        SELECT * FROM
        (<include refid="selectAll" />
		ORDER BY gm.game_releaseDate DESC)
        WHERE rownum <![CDATA[<=]]> 10
    </select>
    
    
    <!-- 인기 게임 목록 출력 (게임 판매량 내림차순) -->
    <select id="SelectPopularGameList" resultMap="gameMap">
		SELECT * FROM
     	(<include refid="selectAll" />
		ORDER BY gm.game_salesRate DESC)	
     	WHERE rownum <![CDATA[<=]]> 10
    </select>
    
    
    <!-- 특정 키워드에 따라 검색된 게임 목록 출력 -->
    <select id="SelectGameListByKeyword" resultMap="gameMap" parameterType="String">
    	<include refid="selectAll" />
		<if test="keyword != null">
			where LOWER(gm.game_name) like '%'||#{keyword}||'%'
			OR LOWER(gm.game_developer) like '%'||#{keyword}||'%'
			OR LOWER(gm.game_context) like '%'||#{keyword}||'%'
			ORDER BY gm.game_code DESC
		</if>
    </select>

   
   <!-- 장르에 검색한 tag가 포함되어 있는 게임 목록 출력  -->
    <select id="SelectGameListByTags" resultMap="gameMap">
    	<include refid="selectAll" />
		WHERE (gn.genre_1=#{tagSearch} OR gn.genre_2=#{tagSearch} OR gn.genre_3=#{tagSearch})
		ORDER BY gm.game_code DESC
    </select>
   
   	<!-- 가격만 선택하고, 선택한 값 이하의 게임 목록을 출력 -->
    <select id="SelectAllGameListByPrice" resultMap="gameMap" parameterType="int">
       	<include refid="selectAll" />
       	<where>
		    CASE WHEN gm.game_discount IS NULL AND gm.game_price <![CDATA[<=]]> #{price} THEN 1
		    WHEN gm.game_discount IS NOT NULL AND gm.game_price*(1-(gm.game_discount/100)) <![CDATA[<=]]> #{price} THEN 1
		    ELSE 0 END = 1
		</where>
		ORDER BY gm.game_code DESC
    </select> 
    
    <!-- 가격을 선택하고, 태그도 직접 입력하여 검색할 때 -->
     <select id="SelectGameListByTagAndPrice" resultMap="gameMap" parameterType="com.stim.vo.GameVO">
    	<include refid="selectAll" />
		<where>
			(gn.genre_1=#{tagSearch} OR gn.genre_2=#{tagSearch} OR gn.genre_3=#{tagSearch})
		    AND(  CASE WHEN gm.game_discount IS NULL AND gm.game_price <![CDATA[<=]]> #{price} THEN 1
		    WHEN gm.game_discount IS NOT NULL AND gm.game_price*(1-(gm.game_discount/100)) <![CDATA[<=]]> #{price} THEN 1
		    ELSE 0 END = 1)
		</where>
		ORDER BY gm.game_code DESC
    </select>
    
    
    <!-- 할인하는 게임 목록 출력 -->
    <select id="SelectNumForSale" resultMap="gameMap">
    	<include refid="selectAll" />
		WHERE gm.game_discount IS NOT NULL
		ORDER BY gm.game_code DESC
    </select>
    
    
    <!-- 게임 상세 페이지 정보 -->
    <select id="SelectGameDetailInfo" resultMap="gameMap">
    	<include refid="selectAll" />
   		WHERE gm.game_code = #{game_code}
    </select>
    
    
    <!-- 할인 목록 삭제 -->
    <update id="discountListRemove">
    	UPDATE game_tbl SET game_discount = ''
    </update>
    
    <!-- 할인 목록 생성 -->
    <update id="createDiscountList" parameterType="map">
    	UPDATE game_tbl SET game_discount = #{discount}
    	WHERE game_code = (SELECT g.game_code FROM (SELECT rownum AS rownumber, game_code FROM game_tbl) 
    	g WHERE g.rownumber = #{code})
    </update>
    
    <!-- 최신 게임 목록 출력 (게임 날짜 최신/내림차순) 메인페이지용 -->
    <select id="SelectNewestGameListMain" resultMap="gameMap">
		SELECT * FROM
        (<include refid="selectAll" />
		ORDER BY gm.game_releaseDate DESC)
        WHERE rownum <![CDATA[<=]]> 6
    </select>
    
    
    <!-- 인기 게임 목록 출력 (게임 판매량 내림차순) 메인페이지용 -->
    <select id="SelectPopularGameListMain" resultMap="gameMap">
		SELECT * FROM
     	(<include refid="selectAll" />
		ORDER BY gm.game_salesRate DESC)	
     	WHERE rownum <![CDATA[<=]]> 3
    </select>
    
    <!-- 게임상세페이지에 댓글 입력-->
    <insert id="InsertReply" parameterType="com.stim.vo.GameReplyVO">
    	INSERT INTO grade_tbl
    	VALUES (grade_code_seq.nextval, #{user_code},
    	 #{game_code}, #{grade_context}, sysdate, #{grade_rate})
    </insert>
    
    <!-- 해당 게임 상세페이지에 가장 마지막 작성된 댓글 가져오기 -->
    <select id="SelectLastReply" resultType="com.stim.vo.GameReplyVO" parameterType="int">
    	SELECT * FROM
    	(SELECT grade_code, 
	       g.user_code AS user_code,  
	       u.user_nickname AS user_nickname,
	       grade_context, 
	       grade_regdate,
	       grade_rate,
	       u.user_picture AS user_picture 
		   FROM user_tbl u, grade_tbl g
	       WHERE game_code = #{game_code}
	       AND u.user_code = g.user_code
	       ORDER BY grade_regdate DESC)
    	   WHERE rownum <![CDATA[<=]]> 1
    </select>
    
    <!-- 게임 상세페이지 댓글 삭제 -->
    <delete id="DeleteReplyByCode" parameterType="int">
    	DELETE grade_tbl
    	WHERE grade_code = #{grade_code}
    </delete>
    
    <!-- 게임상세페이지 댓글 가져오기 -->
    <!-- <select id="SelectALLReply" resultType="com.stim.vo.GameReplyVO" parameterType="int">
    	SELECT grade_code, 
	    g.user_code AS user_code,  
	    u.user_nickname AS user_nickname,
	    grade_context, 
	    grade_regdate,
	    grade_rate,
	    u.user_picture AS user_picture 
		FROM user_tbl u, grade_tbl g
	    WHERE game_code = #{game_code}
	    AND u.user_code = g.user_code
	    ORDER BY grade_regdate DESC
    </select> -->
    
    <select id="SelectALLReply" resultType="com.stim.vo.GameReplyVO">
    	SELECT * FROM
    	(SELECT ROW_NUMBER() OVER(ORDER by grade_regdate DESC) AS row_num,
    	grade_code, 
	    g.user_code AS user_code,  
	    u.user_nickname AS user_nickname,
	    grade_context, 
	    grade_regdate,
	    grade_rate,
	    u.user_picture AS user_picture 
		FROM user_tbl u, grade_tbl g
	    WHERE game_code = #{game_code}
	    AND u.user_code = g.user_code)
        WHERE row_num BETWEEN #{firstRecordIndex} AND #{lastRecordIndex}
	    ORDER BY grade_regdate DESC
    </select>
    
    <!-- 해당 게임 댓글 개수 -->
    <select id="CountAllReply" resultType="int" parameterType="int">
		SELECT count(*) FROM grade_tbl WHERE game_code = #{game_code} GROUP BY game_code
	</select>

    <!-- 게임상세페이지에서 게임 평점 비율 보기 -->
    <select id="SelectGradeRatebyGameCode" resultType="com.stim.vo.GameReplyVO" parameterType="int">
	    SELECT grade_rate 
		FROM grade_tbl
		where game_code = #{game_code}
    </select>

    <!-- 관리자가 게임 삭제 -->
    <delete id="deleteGame" parameterType="int">
    	DELETE FROM game_tbl WHERE game_code = #{game_code} 
    </delete>
    
    <!-- 관리자가 게임 등록 -->
    <insert id="insertGame" parameterType="com.stim.vo.GameVO">
    	INSERT INTO game_tbl
    	VALUES(game_code_seq.nextval, #{game_name}, #{game_price}, #{game_releaseDate}, #{game_developer}, #{game_distribution}, #{game_context}, 0, #{game_picture}, '')
    </insert>
    
    <!-- 게임 장르 등록 -->
    <insert id="insertGenre" parameterType="com.stim.vo.GameVO">
    	INSERT INTO genre_tbl(genre_code, genre_1, genre_2, genre_3, game_code)
    	SELECT genre_code_seq.nextval, #{genre_1}, #{genre_2}, #{genre_3},
    	game_code FROM game_tbl WHERE game_name = #{game_name}
    </insert>
    
    <!-- 관리자가 게임 정보 수정 -->
    <update id="updateGame" parameterType="com.stim.vo.GameVO">
		UPDATE game_tbl SET game_name=#{game_name}, game_price=#{game_price}, game_releaseDate=#{game_releaseDate},
		game_developer=#{game_developer}, game_distribution=#{game_distribution}, game_context=#{game_context},
		game_picture=#{game_picture} WHERE game_code = #{game_code}
    </update>
    
    <!-- 게임 장르 수정 -->
    <update id="updateGenre" parameterType="com.stim.vo.GameVO">
    	UPDATE genre_tbl SET genre_1 = #{genre_1}, genre_2 = #{genre_2}, genre_3 = #{genre_3}
    	WHERE game_code = #{game_code}
    </update>

</mapper>
