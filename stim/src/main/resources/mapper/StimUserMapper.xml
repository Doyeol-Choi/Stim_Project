<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.stim.model.mapper.StimUserMapper">

 	<!-- 로그인 -->
    <select id="getUserAccount" resultType="com.stim.vo.UserVO" parameterType="String">
        SELECT * FROM user_tbl
        WHERE user_id = #{user_id}
    </select>
    
    <!-- 회원가입 -->
    <insert id="registerUser" parameterType="com.stim.vo.UserVO">
        INSERT INTO user_tbl
        VALUES(user_code_seq.nextval, #{user_id}, #{user_password}, #{user_email}, #{user_phone}, 'noimage.jpg', 'N', #{user_nickname})
    </insert>
    
    <!-- 아이디 체크 -->
    <select id="checkById" resultType="int" parameterType="String">
        SELECT count(*) FROM user_tbl
        WHERE user_id = #{user_id}
    </select>
    
    <!-- 아이디 찾기 -->
    <select id="findIdByEmail" resultType="String" parameterType="String">
        SELECT user_id FROM user_tbl
        WHERE user_email = #{user_email}
    </select>
    
    <!-- 비밀번호 찾기 -->
    <select id="findPwByUserId" resultType="int" parameterType="String">
        SELECT count(*) FROM user_tbl
        WHERE user_id = #{user_id} AND user_email = #{user_email}
    </select>
    
    <!-- 비밀번호 변경 -->
    <update id="changePwByUserId" parameterType="String">
    	UPDATE user_tbl SET user_password = #{user_password} 
    	WHERE user_id = #{user_id}
    </update>
    
    <!-- 유저 찾기에서 닉네임으로 유저 목록 검색 -->
    <select id="SearchUserByNickname" resultType="com.stim.vo.SearchUserVO" parameterType="String">
    	SELECT user_code, user_nickname, user_picture FROM user_tbl
    	WHERE user_nickname like '%'||#{user_nickname}||'%'
    </select>
    
    <!-- 유저 찾기에서 코드로 유저 목록 검색 -->
    <select id="SearchUserByCode" resultType="com.stim.vo.SearchUserVO" parameterType="int">
    	SELECT user_code, user_nickname, user_picture FROM user_tbl
    	WHERE user_code = (SELECT u.user_code FROM (SELECT rownum AS rownumber, user_code FROM user_tbl) 
    	u WHERE u.rownumber = #{code})
    </select>
    
    <!-- 로그인중 닉네임으로 유저 검색 -->
    <select id="SearchUserByNicknameLogin" resultType="com.stim.vo.SearchUserVO" parameterType="map">
    	SELECT user_code, user_nickname, user_picture, friend_accepted FROM user_tbl u LEFT OUTER JOIN friend_tbl f
    	ON ((f.friend_user1 = #{login_code} and f.friend_user2 = u.user_code) 
    	or (f.friend_user2 = #{login_code} and f.friend_user1 = u.user_code))
    	WHERE user_nickname like '%'||#{user_nickname}||'%'
    </select>
    
    <!-- 로그인중 공백으로 유저 검색 -->
    <select id="SearchUserByCodeLogin" resultType="com.stim.vo.SearchUserVO" parameterType="int">
    	SELECT user_code, user_nickname, user_picture, friend_accepted FROM user_tbl u LEFT OUTER JOIN friend_tbl f
    	ON ((f.friend_user1 = #{login_code} and f.friend_user2 = u.user_code) or (f.friend_user2 = #{login_code} and f.friend_user1 = u.user_code)) 
        WHERE user_code = (SELECT u.user_code FROM (SELECT rownum AS rownumber, user_code FROM user_tbl) 
    	u WHERE u.rownumber = #{code})
    </select>
    
    <!-- 친구 요청 전 확인 -->
    <select id="FriendRequestCheck" resultType="Integer" parameterType="int">
    	SELECT friend_code FROM friend_tbl
    	WHERE (friend_user1 = #{login_code} and friend_user2 = #{user_code})
    	or (friend_user1 = #{user_code} and friend_user2 = #{login_code})
    </select>
    
    <!-- 친구 요청 -->
    <insert id="AddFriendRequest" parameterType="int">
    	INSERT INTO friend_tbl
    	VALUES(friend_code_seq.nextval, #{login_code}, #{user_code}, 'N')
    </insert>
    
</mapper>
